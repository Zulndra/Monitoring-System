name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://98.87.83.12
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}
            
            # Create backup directory
            BACKUP_DIR="../backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            cp -r . $BACKUP_DIR
            
            echo "✅ Backup created at $BACKUP_DIR"

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}
            
            # Pull latest changes
            git fetch origin
            git checkout main
            git pull origin main
            
            # Restart services
            sudo docker compose down
            sudo docker compose pull
            sudo docker compose up -d
            
            echo "✅ Production deployment completed!"

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            
            cd ${{ secrets.PROJECT_PATH }}
            
            echo "🏥 Starting comprehensive health check..."
            echo ""
            
            # 1. Check container status
            echo "📦 Checking container status..."
            CONTAINERS=$(docker compose ps --format json)
            RUNNING=$(echo "$CONTAINERS" | grep -c '"State":"running"' || echo "0")
            TOTAL=$(echo "$CONTAINERS" | wc -l)
            
            echo "   Running: $RUNNING/$TOTAL containers"
            
            if [ "$RUNNING" -eq 0 ]; then
              echo "   ❌ No containers running!"
              docker compose ps
              exit 1
            fi
            
            echo ""
            
            # 2. Check for errors in logs (last 50 lines)
            echo "📋 Checking for critical errors in logs..."
            ERROR_COUNT=$(docker compose logs --tail=50 2>&1 | grep -iE "error|fatal|panic|critical" | grep -v "level=info" | wc -l || echo "0")
            
            if [ "$ERROR_COUNT" -gt 0 ]; then
              echo "   ⚠️  Found $ERROR_COUNT error messages in logs"
              echo "   Recent errors:"
              docker compose logs --tail=50 2>&1 | grep -iE "error|fatal|panic" | tail -5
            else
              echo "   ✅ No critical errors in recent logs"
            fi
            
            echo ""
            
            # 3. Wait for services to be ready
            echo "⏳ Waiting for services to be ready (30s)..."
            sleep 30
            
            # 4. Check Grafana
            echo "🔍 Checking Grafana..."
            if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health | grep -q "200"; then
              echo "   ✅ Grafana is healthy (HTTP 200)"
            else
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health || echo "000")
              echo "   ❌ Grafana health check failed (HTTP $HTTP_CODE)"
            fi
            
            # 5. Check Prometheus
            echo "🔍 Checking Prometheus..."
            if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:9090/-/healthy | grep -q "200"; then
              echo "   ✅ Prometheus is healthy (HTTP 200)"
            else
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9090/-/healthy || echo "000")
              echo "   ❌ Prometheus health check failed (HTTP $HTTP_CODE)"
            fi
            
            # 6. Check SNMP Exporter
            echo "🔍 Checking SNMP Exporter..."
            if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:9116/metrics | grep -q "200"; then
              echo "   ✅ SNMP Exporter is healthy (HTTP 200)"
            else
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9116/metrics || echo "000")
              echo "   ❌ SNMP Exporter health check failed (HTTP $HTTP_CODE)"
            fi
            
            echo ""
            
            # 7. Check resource usage
            echo "💻 Checking resource usage..."
            docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -10
            
            echo ""
            
            # 8. Final summary
            echo "📊 Deployment Health Summary:"
            echo "   • Containers: $RUNNING/$TOTAL running"
            echo "   • Grafana: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health || echo "DOWN")"
            echo "   • Prometheus: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:9090/-/healthy || echo "DOWN")"
            echo "   • SNMP Exporter: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:9116/metrics || echo "DOWN")"
            
            echo ""
            echo "✅ Health check completed!"

      - name: Send Notification
        if: always()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}
            
            if [ ${{ job.status }} == 'success' ]; then
              echo "🎉 Production deployment successful and healthy!"
            else
              echo "❌ Production deployment failed or unhealthy!"
              echo "📋 Last 30 lines of logs:"
              docker compose logs --tail=30
            fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "### 🚀 Production Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Server**: 98.87.83.12" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
          echo "- **Backup**: Created ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Service Health:" >> $GITHUB_STEP_SUMMARY
          echo "- Grafana: http://98.87.83.12:3000" >> $GITHUB_STEP_SUMMARY
          echo "- Prometheus: http://98.87.83.12:9090" >> $GITHUB_STEP_SUMMARY
          echo "- SNMP Exporter: http://98.87.83.12:9116" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ ${{ job.status }} == 'success' ]; then
            echo "- **Status**: ✅ All systems operational" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ❌ Deployment failed - check logs" >> $GITHUB_STEP_SUMMARY
          fi
